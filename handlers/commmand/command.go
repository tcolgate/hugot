package command

import (
	"bytes"
	"context"
	"errors"
	"flag"
	"fmt"
	"sort"
	"strings"

	shellwords "github.com/mattn/go-shellwords"
	"github.com/tcolgate/hugot"
)

var (
	// handled a mesage and that any following Hear handlers should be
	// skipped.
	ErrSkipHears = errors.New("skip hear messages")

	// ErrUnknownCommand is returned by a command mux if the command did
	// not match any of it's registered handlers.
	ErrUnknownCommand = errors.New("unknown command")

	// ErrBadCLI implies that we could not process this message as a
	// command line. E.g. due to potentially mismatched quoting or bad
	// escaping.
	ErrBadCLI = errors.New("could not process as command line")
)

type Message struct {
	*hugot.Message
	*flag.FlagSet
	args []string

	flagOut *bytes.Buffer
}

// CommandHandler handlers are used to implement CLI style commands. Before the
// Command method is called, the in the incoming message m will have the Text
// of the message parsed into invidual strings, accouting for quoting.
// m.Args(0) will be the name of the command as the handler was called, as per
// os.Args(). Command should add any requires falgs to m and then call m.Parse()
// ErrNextCommand(ctx) can be returned to inform the command mux to hand the resulting
// Args to any known sub CommandHandler.
type CommandHandler interface {
	hugot.Handler
	Command(ctx context.Context, w hugot.ResponseWriter, m *Message) error
}

// ErrUsage indicates that Command handler was used incorrectly. The
// string returned is a usage message generated by a call to -help
// for this command
type ErrUsage struct {
	string
}

type baseCommandHandler struct {
	hugot.Handler
	bcf  CommandFunc
	subs *CommandSet
}

// NewCommandHandler wraps the given function f as a CommandHandler with the
// provided name and description.
func NewCommandHandler(name, desc string, f CommandFunc, cs *CommandSet) CommandWithSubsHandler {
	if f == nil {
		f = defaultCommandHandler
	}
	h := &baseCommandHandler{
		bcf:  f,
		subs: cs,
	}

	h.Handler = hugot.NewBasicHandler(name, desc, h.processMessage)

	return h
}

func defaultCommandHandler(ctx context.Context, w hugot.ResponseWriter, m *Message) error {
	if err := m.FlagSet.Parse(); err != nil {
		return err
	}
	return ErrNextCommand(ctx)
}

func (bch *baseCommandHandler) Command(ctx context.Context, w hugot.ResponseWriter, m *Message) error {
	var errnc errNextCommand
	var ok bool
	err := bch.bcf(ctx, w, m)
	if errnc, ok = err.(errNextCommand); !ok {
		return err
	}
	ch, err := bch.subs.NextCommand(m)
	if err != nil {
		return err
	}

	return ch.Command(errnc.ctx, w, m)
}

func (bch *baseCommandHandler) SubCommands() *CommandSet {
	return bch.subs
}

// Error implements the Error interface for an ErrUsage.
func (e ErrUsage) Error() string {
	return e.string
}

type errNextCommand struct {
	ctx context.Context
}

func (e errNextCommand) Error() string {
	return "use next command"
}

// ErrNextCommand is returned if the command wishes the message
// to be passed to one of the sub-ommands of a CommandSet. The
// ctx will be passed through to the next CommandHandler
func ErrNextCommand(ctx context.Context) error {
	return errNextCommand{ctx}
}

// CommandPathFromContext returns the path used to get to
// this command handler
func CommandPathFromContext(ctx context.Context) []string {
	iv := ctx.Value(cmdPathKey)

	if iv == nil {
		return []string{}
	}

	v := iv.([]string)
	return v
}

func (bch *baseCommandHandler) processMessage(ctx context.Context, w hugot.ResponseWriter, m *Message) error {
	var err error

	if m.args == nil {
		m.args, err = shellwords.Parse(m.Text)
		if err != nil {
			return ErrBadCLI
		}
	}

	if len(m.args) == 0 {
		//nothing to do.
		return errors.New("command handler called with no possible arguments")
	}

	name := m.args[0]
	m.flagOut = &bytes.Buffer{}
	m.FlagSet = flag.NewFlagSet(name, flag.ContinueOnError)
	m.FlagSet.SetOutput(m.flagOut)

	err = bch.Command(ctx, w, m)
	if err == flag.ErrHelp {
		fmt.Fprint(w, cmdUsage(bch, name, nil).Error())
		return ErrSkipHears
	}

	return err
}

// CommandFunc describes the calling convention for CommandHandler
type CommandFunc func(ctx context.Context, w hugot.ResponseWriter, m *Message) error

// CommandWithSubsHandler should be implemented by any command that includes
// sub commands.
type CommandWithSubsHandler interface {
	CommandHandler
	SubCommands() *CommandSet // List the supported sub-commands
}

// CommandSet assists with supporting command handlers with sub-commands.
type CommandSet map[string]CommandHandler

// NewCommandSet creates an empty commands set.
func NewCommandSet() *CommandSet {
	cs := make(CommandSet)
	return &cs
}

// AddCommandHandler adds a CommandHandler to a CommandSet
func (cs *CommandSet) AddCommandHandler(c CommandHandler) {
	n, _ := c.Describe()

	(*cs)[n] = c
}

type byAlpha struct {
	ns  []string
	ds  []string
	chs []CommandHandler
}

func (b *byAlpha) Len() int           { return len(b.ns) }
func (b *byAlpha) Less(i, j int) bool { return b.ns[i] < b.ns[j] }
func (b *byAlpha) Swap(i, j int) {
	b.ns[i], b.ns[j] = b.ns[j], b.ns[i]
	b.ds[i], b.ds[j] = b.ns[j], b.ds[i]
	b.chs[i], b.chs[j] = b.chs[j], b.chs[i]
}

// List returns the names and usage of the subcommands of
// a CommandSet.
func (cs *CommandSet) List() ([]string, []string, []CommandHandler) {
	cmds := []string{}
	descs := []string{}
	chs := []CommandHandler{}
	hasHelp := false

	for _, ch := range *cs {
		n, d := ch.Describe()
		if n == "help" {
			hasHelp = true
			continue
		}
		cmds = append(cmds, n)
		descs = append(descs, d)
		chs = append(chs, ch)
	}

	sorted := &byAlpha{cmds, descs, chs}
	sort.Sort(sorted)
	if hasHelp {
		hh := (*cs)["help"]
		_, hd := hh.Describe()
		sorted.ns = append([]string{"help"}, sorted.ns...)
		sorted.ds = append([]string{hd}, sorted.ds...)
		sorted.chs = append([]CommandHandler{hh}, sorted.chs...)
	}

	return sorted.ns, sorted.ds, sorted.chs
}

// NextCommand picks the next commands to run from this command set based on the content
// of the message
func (cs *CommandSet) NextCommand(m *Message) (CommandHandler, error) {
	// This is repeated from RunCommandHandler, probably something wrong there
	if len(m.Args()) == 0 {
		cmds, _, _ := cs.List()
		return nil, fmt.Errorf("required sub-command missing: %s", strings.Join(cmds, ", "))
	}

	matches := []CommandHandler{}
	matchesns := []string{}
	ematches := []CommandHandler{}
	for name, cmd := range *cs {
		if strings.HasPrefix(name, m.args[0]) {
			matches = append(matches, cmd)
			matchesns = append(matchesns, name)
		}
		if name == m.args[0] {
			ematches = append(ematches, cmd)
		}
	}

	switch {
	case len(matches) == 0 && len(ematches) == 0:
		return nil, ErrUnknownCommand
	case len(ematches) > 1:
		return nil, fmt.Errorf("multiple exact matches for %s", m.args[0])

	case len(ematches) == 1:
		return ematches[0], nil
	case len(matches) == 1:
		return matches[0], nil

	default:
		return nil, fmt.Errorf("ambigious command, %s: %s", m.args[0], strings.Join(matchesns, ", "))
	}
}

func (cs *CommandSet) ProcessMessage(ctx context.Context, w hugot.ResponseWriter, hm *hugot.Message) error {
	m := &Message{Message: hm}

	ch, err := cs.NextCommand(m)
	if err != nil {
		return err
	}
	hn, _ := ch.Describe()
	m.FlagSet = flag.NewFlagSet(hn, flag.ContinueOnError)
	m.flagOut = &bytes.Buffer{}
	m.FlagSet.SetOutput(m.flagOut)
	err = ch.Command(ctx, w, m)
	if err == flag.ErrHelp {
		fmt.Fprint(w, cmdUsage(ch, hn, nil).Error())
		return ErrSkipHears
	}

	return err
}

func (m *Message) Copy() *Message {
	nm := Message{Message: m.Message.Copy()}
	nm.args = nil
	nm.FlagSet = nil
	nm.flagOut = &bytes.Buffer{}
	return &nm
}

func (m *Message) Args() []string {
	if m.args == nil {
		m.args = strings.Split(m.Text, " ")
	}
	return m.args
}

// Parse process any Args for this message in line with any flags that have
// been added to the message.
func (m *Message) Parse() error {
	var err error
	if m.args == nil {
		m.args, err = shellwords.Parse(m.Text)
	}
	if err != nil {
		return ErrBadCLI
	}

	err = m.FlagSet.Parse(m.args[1:])
	m.args = m.FlagSet.Args()
	return err
}

// Properties are used to associate scoped key/value data
// with a message
func (m *Message) Properties() hugot.PropertyStore {
	return m.Message.Properties()
}
